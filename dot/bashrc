#!/usr/bin/env bash

# Defaults from /etc/skel/.bashrc ------------
export SHELL="/opt/homebrew/bin/bash"

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# source external helpers
source "${HOME}/bin/colors.sh"

# don't put duplicate lines or lines starting with space in the history
HISTCONTROL=ignoreboth:erasedups:ignorespace
HISTSIZE=100000
HISTFILESIZE=1000000
HISTTIMEFORMAT='%F %T ' # use standard ISO time format

# determine OS to run custom commands
case "${OSTYPE}" in
  linux*)
    os_open="xdg-open"
    f_path="${HOME}/.config/firefox"
  ;;
  darwin*)
    os_open="open"
    f_path="${HOME}/Library/Application Support/Firefox/Profiles"
  ;;
esac

# https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
shopt -s histappend   # append to the history file, don't overwrite it
shopt -s checkwinsize # update the values of LINES and COLUMNS
shopt -s cdspell      # minor errors in the spelling of a directory component in a cd command will be corrected.
shopt -s dirspell     # minor errors in the spelling of a directory during tab-completion
shopt -s autocd       # a command name that is the name of a directory is executed as if it were the argument to the cd command
shopt -s cmdhist      # save all lines of a multiple-line command in the same history entry
shopt -u execfail     # exec process should kill the shell when it exits
shopt -s globstar     # turn on recursive globbing

# Aliases --------------------------
alias sssh="ssh -q -o BatchMode=yes -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -t"
alias ls="ls --color=auto --group-directories-first"
alias grep='grep --exclude="*.pyc" --exclude="*.swp" --exclude="*.tfstate.backup" --color=auto --exclude-dir=.terraform --exclude-dir=.git'
alias v="vf" # quick opening files with vim
alias :q="exit"
alias 1p="ykman oath code 1p"

# 3rd party applications --------------------------
if type "lsd" > /dev/null 2>&1; then
  alias ls="lsd -F --color=auto --group-dirs first"
  cd() { builtin cd "$@" && lsd -F --color=auto --group-dirs first; }
fi

# Prompt ----------------------------
PROMPT_COMMAND="get_ps1"

# Exports ---------------------------
export EDITOR="vim"
export VISUAL="${EDITOR}"
export GREP_COLORS="mt=01;31"
export GOPATH="${HOME}/goprojects"
export BAT_THEME="TwoDark"

export YARN_PATH="${HOME}/.yarn/bin:${HOME}/.config/yarn/global/node_modules/.bin"
export PATH="${PATH}:${HOME}/bin:${HOME}/.local/bin:${GOPATH}/bin:${YARN_PATH}"
export SHELLCHECK_OPTS="-e SC1090" # ignore https://github.com/koalaman/shellcheck/wiki/SC1090

# color for manpages in less makes manpages a little easier to read
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# FZF <3
export FZF_COMPLETION_TRIGGER="z"
#export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --no-messages -g "!{.git,*.swp,**/.terraform}/*" 2> /dev/null'
export FZF_DEFAULT_OPTS="
  --multi
  --ansi
  --reverse"
export FZF_TMUX_OPTS="-p80%,60%"
export FZF_CTRL_R_OPTS="
  --preview 'echo {}'
  --preview-window down:3:wrap
  --bind 'ctrl-/:toggle-preview'
  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
  --color header:italic
  --header 'CTRL-Y to copy command into clipboard / CTRL-/ to toggle preview'"

# Use external programs if they are found on the system
if command -v fd > /dev/null; then
  export FZF_DEFAULT_COMMAND="fd --strip-cwd-prefix --type f --hidden --follow --exclude .git"
  export FZF_ALT_C_COMMAND="fd --strip-cwd-prefix --type d --hidden --follow --exclude .git"
  export FZF_CTRL_T_COMMAND="fd --strip-cwd-prefix --type f --type d --hidden --follow --exclude .git"
fi

command -v bat  > /dev/null && export FZF_CTRL_T_OPTS="--preview 'bat -n --color=always {}'"
command -v blsd > /dev/null && export FZF_ALT_C_COMMAND="blsd"
command -v tree > /dev/null && export FZF_ALT_C_OPTS="--preview 'tree -C {}'"

# Binds ---------------------------
stty werase undef
bind -x '"\C-f": fvim'

# Insert mode
bind -m vi-insert '"jj": vi-movement-mode'
bind -m vi-insert '"\C-p": previous-history'
bind -m vi-insert '"\C-n": next-history'
bind -m vi-insert '"\C-e": end-of-line'
bind -m vi-insert '"\C-a": beginning-of-line'
bind -m vi-insert '"\C-x": backward-kill-line'
bind -m vi-insert '"\ex": backward-kill-word'
bind -m vi-insert '"\ef": forward-word'
bind -m vi-insert '"\eb": backward-word'

# Command (normal) mode
bind -m vi-command '"H": beginning-of-line'
bind -m vi-command '"L": end-of-line'
bind -m vi-command '"k": ""'
bind -m vi-command '"j": ""'
bind -m vi-command '"v": ""' # Don't edit command with default editor (nvim)
bind -m vi-command '"\C-e": edit-and-execute-command'

# Bind C-p and C-n to search the history conditional on input (like zsh) instead
# of simply going up or down (note: we cannot seem to set this in the inputrc so
# we do it here instead)
bind '"\C-p": history-search-backward'
bind '"\C-n": history-search-forward'

# Functions -----------------------

# search all available tmux sessions
tm() {
  local name=${1}
  [[ -n "${TMUX}" ]] && change="switch-client" || change="attach-session"
  if [ "${name}" ]; then
    tmux "${change}" -t "${name}" 2>/dev/null || (tmux new-session -d -s "${name}" && tmux ${change} -t "${name}"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) && tmux ${change} -t "${session}" || echo "No sessions found."
}

# search current directory for all files recursively and open with vim
fvim() {
  local files; mapfile -t files < <(
    FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} --preview 'bat -n --color=always {}'" \
    fzf-tmux "${FZF_TMUX_OPTS}"
  )
  [[ -n "${files[*]}" ]] && history -s ${EDITOR} -p "${files[@]}" && ${EDITOR} -p "${files[@]}"
}

# vim with fasd and fzf
vf() {
  local fasd_results; fasd_results=$(fasd -Rfl "$*") || return

  # If only a single entry has been found, then just open otherwise launch fzf
  if [ "$(wc -l <<< "${fasd_results}" | tr -d ' ')" == "1" ]; then
    files="${fasd_results[*]}"
  else
    files=$(echo "${fasd_results[*]}" | fzf-tmux "${FZF_TMUX_OPTS}" --)
  fi
  [[ -n "${files[*]}" ]] && history -s ${EDITOR} -p "${files[@]}" && ${EDITOR} -p "${files[@]}"
}

# search for string in all files recursively in current directory and open with vim
vfind() {
  if [ "$#" -lt 1 ]; then echo "Supply string to search for!"; return 1; fi
  printf -v search "%q" "$*"
  rg_command="rg --column --line-number --no-heading --color=always --smart-case "
  local files; files=$(
    FZF_DEFAULT_COMMAND="${rg_command} '${search}' || true" \
      fzf --bind "change:reload:${rg_command} {q} || true" \
          --ansi --disabled --query "${search}" \
          --delimiter : \
          --preview 'bat --style=full --color=always --highlight-line {2} {1}' \
          --preview-window '~3:+{2}+3/2' | awk -F ':' '{print $1":"$2":"$3}'
  )
  [[ -n "${files[*]}" ]] && history -s ${EDITOR} -p ${files[*]} && ${EDITOR} -p ${files[*]}
}

pods() {
  FZF_DEFAULT_COMMAND="kubectl get pods --all-namespaces" \
    fzf --info=inline --layout=reverse --header-lines=1 --border \
    --prompt "$(kubectl config current-context | sed 's/-context$//')> " \
    --header $'╱ Enter (kubectl exec) ╱ CTRL-O (open log in editor) ╱ CTRL-R (reload) ╱\n\n' \
    --bind ctrl-/:toggle-preview \
    --bind 'enter:execute:kubectl exec -it --namespace {1} {2} -- bash > /dev/tty' \
    --bind 'ctrl-o:execute:${EDITOR:-vim} <(kubectl logs --namespace {1} {2}) > /dev/tty' \
    --bind 'ctrl-r:reload:$FZF_DEFAULT_COMMAND' \
    --preview-window up:follow \
    --preview 'kubectl logs --follow --tail=100000 --namespace {1} {2}' "$@"
}

# diff git commit
flog() {
  local hash
  hash=$(git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "${@}" | fzf | awk '{print $1}')
  echo "${hash}" | xclip
  git showtool "${hash}"
}

# create a pr locally and open in browser
pr() {
  local reviewers=${1}
  hub pull-request -p -a "lucasteligioridis" -o -r "${reviewers}" -c
}

# search git commits and find hash
gc() {
  local hash
  hash=$(git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "${@}" | fzf | awk '{print $1}')
  [[ -n "${hash}" ]] && gopen "${hash}"
}

# search commits and show diff
gh() {
  _branch_name > /dev/null || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  _fzf_down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -200' |
  grep -o "[a-f0-9]\\{7,\\}"
}

# search git commits and launch interactively
gir() {
  git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "${@}" |
  fzf --height 50% "$@" --border --ansi --no-sort --reverse --multi \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -200' |
  grep -o "[a-f0-9]\\{7,\\}" |
  xargs -I% git rebase -i %~
}

# open git commit in browser
gopen() {
  local hash=${1}
  # github.com:example/project
  url=$(git config --local remote.origin.url | sed 's/@git//' | sed 's/\.git//')
  domain=${url%%:*} # github.com
  project=${url#*:} # example/project
  username=${project%%/*} # example
  repo=${project#*/} # project
  commit="https://${domain}/${username}/${repo}/commit/${hash}"
  "${os_open}" "${commit}" >/dev/null 2>/dev/null
}

# Quickly open CI pipeline page for the current directories build page
ci() {
  repo_root="$(git rev-parse --show-toplevel)"

  if [ -f "${repo_root}/.circleci/config.yml" ]; then
    url="https://app.circleci.com/pipelines"
    endpoint=$(git config --local remote.origin.url | sed 's/@git//' | sed 's/\.git//' | sed 's/\.com//' | tr ':' '/')
  fi

  "${os_open}" "${url}/${endpoint}" >/dev/null 2>/dev/null
}

# search latest 30 branches and checkout
branch() {
  local tags; tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  local branches; branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  local target; target=$(
    (echo "$tags"; echo "$branches") | sed '/^$/d' |
    _fzf_down --no-hscroll --reverse --ansi +m -d "\t" -n 2 -q "$*") || return
  git checkout $(echo "$target" | awk '{print $2}')
}

# search firefox history and launch in browser
fh() {
  local cols; cols=$(( COLUMNS / 3 ))
  local sep; sep='{::}'
  local f_history; f_history=$(find "${f_path}"/*.default-release -iname places.sqlite)
  cp -f "${f_history}" /tmp/h
  sqlite3 -separator ${sep} /tmp/h \
    "select substr(title, 1, ${cols}), url
     from moz_places order by last_visit_date desc" |
  awk -F ${sep} '{printf "%-'${cols}'s  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi --tiebreak=index --no-hscroll | sed 's#.*\(https*://\)#\1#' | xargs "${os_open}" > /dev/null 2> /dev/null
}

fuzzpass() {
  local arg=$1
  local item result
  item=$(1pass)
  result=$(echo "${item}" | fzf)
  [[ -n "${arg}" ]] || arg="password"
  [[ -n "${item}" ]] && 1pass "${result}" "${arg}"
}

sudo() {
  if [[ ${1} == "vim" ]]; then
    shift; command sudo -E vim "${@}"
  else
    command sudo "${@}"
  fi
}

# replace all matching strings
replace() {
  local search=${1}
  local replace=${2}
  grep -rsl "${search}" -- * | tee /dev/stderr | xargs sed -i "s|${search}|${replace}|g"
}

# sort files by size
sbs() {
  du -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';
}

# file search
sfind() { find . -iname "*${1}*" "${@:2}"; }
rgrep() {
  local search=${1}
  exclude=".config,.git,.lock,**/.terraform"
  rg_command='rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --no-messages --color "always" -g "!{'${exclude}'}/*"'
  eval "${rg_command}" "${1}" -- *;
}

# check if command exists and run custom startup
command_init() {
  local app=${1}
  local cmd=${*}
  if command -v "${app}" 1>/dev/null 2>&1; then
    eval "$(${cmd})"
  fi
}

get_ps1() {
  local exit_status=$?
  tmux set -p @status "${exit_status}"
  [ -f "${HOME}/bin/tmux-kube-prompt" ] && "${HOME}/bin/tmux-kube-prompt"
  # shorten path
  # shellcheck disable=SC2001
  PS1X=$(sed "s:\\([^/\\.]\\)[^/]*/:\\1/:g" <<< "${PWD/#$HOME/\~}")
  # declare prompt
  PS1="${TEAL}${BOLD}${PS1X}${NC}$("${HOME}/bin/git-prompt")${BOLD}\\n${ORANGE}λ ${NC}"
}

# Helpers -----------------------
_fzf_down() {
  fzf --height 50% "$@" --border
}

_branch_name() {
  git rev-parse --abbrev-ref HEAD 2> /dev/null
}

# Custom init apps ------------------------
command_init fasd --init posix-alias bash-ccomp bash-ccomp-install
command_init hub alias -s

# Misc ------------------------------------
# autocomplete targets in Makefile
[ -f Makefile ] && complete -W "$(grep -oE '^[a-zA-Z0-9_-]+:([^=]|$)' Makefile | sed 's/[^a-zA-Z0-9_-]*$//')" make

# disable software flow control (dont freeze terminal with C-S)
stty -ixon

# start fzf
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# custom bash files
if [ -d ~/.bash.d ]; then
  for file in ~/.bash.d/*; do
    source "${file}"
  done
fi
